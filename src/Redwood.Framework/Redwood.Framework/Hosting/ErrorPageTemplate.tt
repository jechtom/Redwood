<#@ template language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Net" #>

<!DOCTYPE html>
<html>
	<head>
		<title>Server Error in Application</title>
		<style type="text/css">
body { font-family: Arial,Tahoma,sans-serif; font-size: 11pt; }
h1 { color: #e00000; font-weight: normal; font-size: 24pt; }
h2 { font-style: normal; font-size: 16pt; font-weight: bold; margin-bottom: 35px; }
h3 { color: #e00000; font-weight: normal; font-size: 14pt; }
pre { background-color: #ffffc0; padding: 20px; font-size: 12pt; }
span.current-line { color: red; }
		</style>
	</head>
	<body>
		<h1>Server Error in Application</h1>
		<h2>HTTP <#= ErrorCode #> <#= WebUtility.HtmlEncode(ErrorDescription) #></h2>
		<p><strong><#= Error.GetType().FullName #>: <#= WebUtility.HtmlEncode(Error.Message) #></strong></p>

<# if (Url != null) { #>
		<p>Request URL: <strong><#= Verb #> <#= WebUtility.HtmlEncode(Url) #></strong></p>
<# } #>

<# if (ClassName != null) { #>
		<p>Source Class: <strong><#= WebUtility.HtmlEncode(ClassName.AssemblyQualifiedName) #></strong></p>
<# } #>

<# if (!string.IsNullOrEmpty(FileName)) { #>
		<p>Source File: <strong><#= WebUtility.HtmlEncode(FileName) #></strong></p>
<# } #>

<# if (LineNumber > 0) { #>
		<p>Line: <strong><#= LineNumber #></strong></p>
<# } #>

<# if (!string.IsNullOrEmpty(CurrentUserName)) { #>
		<p>Current User: <strong><#= WebUtility.HtmlEncode(CurrentUserName) #></strong></p>
<# } #>

<# if (!string.IsNullOrEmpty(IpAddress)) { #>
		<p>Client IP: <strong><#= WebUtility.HtmlEncode(IpAddress) #></strong></p>
<# } #>

<# 
	var sourceLines = GetSourceLines();
    if (sourceLines != null)
    {
#>
		<p>&nbsp;</p>
		<h3>Source Location</h3>
<#
        this.Write("<pre>");
        foreach (var line in sourceLines)
        {
            if (line.LineNumber == LineNumber)
            {
                this.Write("<span class='current-line'>");
            }

            if (line.LineNumber == null)
            {
                this.Write(new string(' ', 15));
            }
            else
            {
                this.Write(("Line " + line.LineNumber + ": ").PadLeft(15));
            }
            this.Write(WebUtility.HtmlEncode(line.Text));

			if (line.LineNumber == LineNumber)
            {
                this.Write("</span>");
            }
            this.Write("<br />");
        }
		this.Write("</pre>");
    }
#>
		
		<p>&nbsp;</p>
		<h3>Stack Trace</h3>
<#
    this.Write("<pre>");
    using (var sr = new StringReader(Error.ToString()))
    {
        string line;
        while ((line = sr.ReadLine()) != null)
        {
            this.Write(WebUtility.HtmlEncode(line));
            this.Write("<br />");
        }
    }
	this.Write("</pre>");
#></pre>
		<p>&nbsp;</p>

	</body>
</html>




<#+
	public int ErrorCode { get; set; }

	public string ErrorDescription { get; set; }

	public string FileName { get; set; }

	public Type ClassName { get; set; }

	public int LineNumber { get; set; }

	public int PositionOnLine { get; set; }

	public string Url { get; set; }

	public string Verb { get; set; }

	public string IpAddress { get; set; }

	public string CurrentUserName { get; set; }

	public Exception Error { get; set; }




	/// <summary>
	/// Gets the source lines near the error and highlights the error.
	/// </summary>
    private IList<SourceLine> GetSourceLines()
	{
	    if (string.IsNullOrEmpty(FileName))
	    {
	        return null;
	    }

        try
        {
            var lines = new List<SourceLine>();
            using (var sr = new StreamReader(FileName, true))
            {
                string line;
                int lineNumber = 0;
                while (!sr.EndOfStream && lineNumber < LineNumber + 2)
                {
                    line = sr.ReadLine();
                    lineNumber++;

                    if (lineNumber >= LineNumber - 2)
                    {
                        // write the line to the output
						lines.Add(new SourceLine() { LineNumber = lineNumber, Text = line });

						// mark the position on the problem line
                        if (lineNumber == LineNumber)
                        {
                            lines.Add(new SourceLine() { Text = new string('-', PositionOnLine) + '^' });
                        }
                    }
                }
            }
            return lines;
        }
        catch
        {
            return null;
        } 
    }


    class SourceLine
    {
        public int? LineNumber { get; set; }

        public string Text { get; set; }
	}
#>