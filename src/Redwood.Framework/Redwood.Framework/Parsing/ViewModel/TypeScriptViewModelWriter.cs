using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Redwood.Framework.Parsing.ViewModel
{
    /// <summary>
    /// Writes the TypeScript view models.
    /// </summary>
    public class TypeScriptViewModelWriter : IViewModelWriter
    {

        private StringBuilder builder = new StringBuilder();

        /// <summary>
        /// Writes the begin file.
        /// </summary>
        public void WriteBeginFile()
        {
            builder.AppendLine("// Generated by Redwood - Do not modify this file");
        }

        /// <summary>
        /// Writes the begin class.
        /// </summary>
        public void WriteBeginClass(string name)
        {
            builder.AppendLine(string.Format("class {0} {{", name));
            builder.AppendLine();
        }

        /// <summary>
        /// Writes the property.
        /// </summary>
        public void WriteProperty(string name, string type)
        {
            if (!type.EndsWith("[]"))
            {
                builder.AppendLine(string.Format("    public {0} = ko.observable<{1}>();", name, type));
            }
            else
            {
                builder.AppendLine(string.Format("    public {0} = ko.observableArray<{1}>();", name, type.Substring(0, type.Length - 2)));
            }
            builder.AppendLine();
        }

        /// <summary>
        /// Writes the read only property.
        /// </summary>
        public void WriteReadOnlyProperty(string name, string type, string body)
        {
            builder.AppendLine(string.Format("    public {0} = ko.computed<{1}>(() => {{", name, type));
            builder.AppendLine("        return " + body);
            builder.AppendLine("    });");
            builder.AppendLine();
        }

        /// <summary>
        /// Writes the function.
        /// </summary>
        public void WriteFunction(string name, string[] paramDefinitions, string returnType, string body)
        {
            builder.AppendLine(string.Format("    public {0}({1}): {2} {{", name, string.Join(", ", paramDefinitions), returnType));
            builder.AppendLine(body);
            builder.AppendLine("    }");
            builder.AppendLine();
        }

        /// <summary>
        /// Writes the end class.
        /// </summary>
        public void WriteEndClass()
        {
            builder.AppendLine("}");
            builder.AppendLine();
        }

        /// <summary>
        /// Writes the end file.
        /// </summary>
        public void WriteEndFile()
        {
        }

        /// <summary>
        /// Gets the output.
        /// </summary>
        public string GetOutput()
        {
            return builder.ToString();
        }
    }
}